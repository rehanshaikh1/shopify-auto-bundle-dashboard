<!DOCTYPE html>
<html>
<head>
  <title>Product Bundle Dashboard</title>
  
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/choices.js/1.1.6/styles/css/choices.css" xintegrity="sha512-0bYNWBaGnMqLCuum81OA7oZo7/pIEjWb/ad3vdKuKlgTZXalLMDkRT3P4Z262/aQBnNuznUg3WpTb5Vgu11abw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  
  <style>
    :root {
      --p-color-bg-default: #ffffff;
      --p-color-text-default: #212b36; /* Darker text */
      --p-color-icon-default: #5c5c5c;
      --p-color-border-default: #c4c4c4;
      --p-color-interactive-default: #0070c0; /* Polaris Blue */
      --p-color-interactive-hover: #005691;
      --p-color-surface-subdued: #f4f6f8;
      --p-color-surface-header: #f9fafb;
      --p-color-surface-active: #eef4f9; /* Light blue on hover/focus */
      --p-font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    }
    body { 
      font-family: var(--p-font-family); 
      margin: 30px; 
      background-color: var(--p-color-surface-subdued);
      color: var(--p-color-text-default);
    }
    h1 { 
      font-size: 28px;
      margin-top: 0;
      margin-bottom: 25px;
      font-weight: 600;
      color: var(--p-color-text-default); 
    }
    .card {
      background-color: var(--p-color-bg-default);
      border: 1px solid var(--p-color-border-default);
      border-radius: 4px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 1px 0 rgba(0, 0, 0, 0.05); 
    }
    .card-header {
        padding-bottom: 15px;
        margin-bottom: 15px;
        border-bottom: 1px solid var(--p-color-surface-subdued);
    }
    h2 {
      font-size: 18px;
      font-weight: 600;
      margin: 0;
    }
    h3 {
      font-size: 16px;
      font-weight: 600;
      margin-top: 0;
      margin-bottom: 15px;
      color: var(--p-color-text-default);
    }
    h5 { /* Added style for h5 */
        font-size: 14px;
        font-weight: 500;
        margin-top: -10px; /* Adjust spacing below h3 */
        margin-bottom: 15px;
        color: var(--p-color-text-default);
    }
    
    /* -------------------------------------- */
    .bundle-form label {
      display: block;
      margin-top: 10px;
      margin-bottom: 5px;
      font-weight: 400;
      font-size: 14px;
    }
    .form-group {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }
    
    .input-field {
        flex-basis: 250px; 
        flex-grow: 1;
    }
    /* Standard input styles */
    .bundle-form input[type="number"] {
      padding: 8px 12px;
      border: 1px solid var(--p-color-border-default);
      border-radius: 4px;
      box-sizing: border-box;
      width: 100%;
      transition: border-color 0.2s, box-shadow 0.2s;
    }
    
    .bundle-form input[type="number"]:focus {
        border-color: var(--p-color-interactive-default);
        box-shadow: 0 0 0 1px var(--p-color-interactive-default);
        outline: none;
    }
    
    /* 💡 Choices.js Custom Styling for always-open, scrollable list */
    .choices {
        margin-bottom: 15px; /* Adjust spacing below the component */
    }
    .choices__inner {
        background-color: var(--p-color-bg-default);
        border: 1px solid var(--p-color-border-default);
        border-radius: 4px;
        min-height: auto;
        padding: 0;
    }
    .choices__list--multiple {
        /* Styles for selected items in the input area */
        padding: 5px 7px 0 7px;
    }
    /* 💡 Custom Color for Selected Item Tags */
    .choices__list--multiple .choices__item {
        display: inline-block;
        vertical-align: middle;
        border-radius: 20px;
        padding: 4px 10px;
        font-size: 12px;
        font-weight: 500;
        margin-right: 3.75px;
        margin-bottom: 3.75px;
        background-color: var(--p-color-interactive-default); /* Use Polaris Blue */
        border: 1px solid var(--p-color-interactive-default); /* Use Polaris Blue */
        color: #FFFFFF; /* White text for contrast */
        word-break: break-all;
    }
    
    /* Ensure the button within the selected item is styled for visibility */
    .choices__list--multiple .choices__item .choices__button {
        color: #FFFFFF;
        border-left-color: rgba(255, 255, 255, 0.5);
    }
    .choices__list--multiple .choices__item .choices__button:hover,
    .choices__list--multiple .choices__item .choices__button:focus {
        color: #FFFFFF;
        opacity: 0.8;
    }

    .choices__input {
        background-color: var(--p-color-bg-default);
        /* Important: Adjust input padding to match theme spacing */
        padding: 8px 12px; 
        margin: 0;
        font-size: 14px;
    }
    .choices__input:focus {
        box-shadow: none; /* Let the container handle focus state */
    }
    /* FIX: Ensure the inner wrapper always looks focused/open */
    .choices.is-focused .choices__inner,
    .choices:not(.is-focused) .choices__inner { 
        border-color: var(--p-color-border-default); /* Use default border when blurred */
        box-shadow: none;
    }
    .choices.is-focused .choices__inner {
        border-color: var(--p-color-interactive-default); /* Reapply focus style when actually focused */
        box-shadow: 0 0 0 1px var(--p-color-interactive-default);
    }
    
    /* 💡 UPDATED: Style for standard dropdown/list */
    .choices__list--dropdown {
        /* Remove the 'always-open' forcing styles (position: relative, visibility/opacity overrides) */
        
        /* 💡 NEW: Max Height for Dropdown List */
        max-height: 120px !important; /* Forces a controlled scrollable height */
        overflow-y: auto;
        
        /* Keep original styling for appearance */
        background-color: var(--p-color-bg-default);
        border: 1px solid var(--p-color-border-default);
        border-radius: 4px;
        padding: 0;
        z-index: 10; /* Ensure it floats above other elements */
    }
    /* FIX: Correct positioning when open (standard Choices.js behavior) */
    .choices.is-open .choices__list--dropdown {
        border-top-color: var(--p-color-border-default);
        margin-top: -1px;
        border-radius: 0 0 4px 4px;
    }
    
    .choices__list--dropdown .choices__item--choice {
        padding: 10px 12px;
        font-size: 14px;
    }
    .choices__list--dropdown .choices__item--choice.is-highlighted {
        background-color: var(--p-color-surface-active);
        color: var(--p-color-text-default);
    }

    .primary-button {
      padding: 10px 20px;
      background-color: var(--p-color-interactive-default);
      color: white;
      border: 1px solid var(--p-color-interactive-default);
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
      transition: background-color 0.2s, border-color 0.2s;
      margin-top: 15px;
      display: inline-block;
      text-decoration: none;
    }
    .primary-button:hover {
      background-color: var(--p-color-interactive-hover);
      border-color: var(--p-color-interactive-hover);
    }
    
    .checkbox-wrapper {
        margin-bottom: 15px;
    }
    .checkbox-wrapper input[type="checkbox"] {
        margin-right: 8px;
    }
    .tab-container { 
        display: flex;
        border: 1px solid var(--p-color-border-default);
        border-radius: 4px;
        overflow: hidden;
        margin-bottom: 20px;
    }
    .tab { 
        flex-grow: 1;
        text-align: center;
        padding: 12px 20px; 
        cursor: pointer; 
        background-color: var(--p-color-bg-default); 
        border-right: 1px solid var(--p-color-border-default);
        transition: background-color 0.2s;
        font-weight: 500;
    }
    .tab:last-child {
        border-right: none;
    }
    .tab:hover:not(.active) {
        background-color: var(--p-color-surface-active);
    }
    .tab.active { 
        background-color: var(--p-color-interactive-default); 
        color: white; 
        border-right-color: var(--p-color-interactive-default);
    }
    .tab.active:last-child {
        border-right-color: var(--p-color-interactive-default);
    }
    .tab-content { 
        display: none; 
        padding-top: 5px; 
    }
    .tab-content.active { 
        display: block; 
    }
    table { 
      border-collapse: collapse; 
      width: 100%; 
    }
    th, td { 
      border: none; 
      border-bottom: 1px solid var(--p-color-surface-subdued);
      padding: 12px 16px; 
      text-align: left; 
      font-size: 14px;
    }
    th { 
      background-color: var(--p-color-surface-header);
      font-weight: 500;
      color: var(--p-color-text-default);
    }
    
    tr:last-child td {
        border-bottom: none;
    }
    .no-bundles { 
        color: var(--p-color-icon-default); 
        padding: 10px 0; 
        font-style: italic;
    }
    .manage-button { 
      color: var(--p-color-interactive-default); 
      text-decoration: none; 
      font-size: 14px;
      padding: 5px 0; 
      display: inline-block;
    }
    .manage-button:hover { 
      text-decoration: underline;
      color: var(--p-color-interactive-hover);
    }
    
    /* New styles for flash messages */
    .flash-message {
      padding: 15px;
      margin-bottom: 20px;
      border-radius: 4px;
      font-weight: 500;
      word-break: break-word;
      white-space: pre-wrap;
      position: relative; /* 💡 Added for button positioning */
      transition: opacity 0.5s ease-out; /* 💡 Added for fade out */
    }
    .flash-message.success {
      background-color: #d4edda; /* Light green */
      border: 1px solid #c3e6cb;
      color: #155724; /* Dark green text */
    }
    .flash-message.error {
      background-color: #f8d7da; /* Light red */
      border: 1px solid #f5c6cb;
      color: #721c24; /* Dark red text */
    }

    /* 💡 Close Button Styles */
    .close-button {
      position: absolute;
      top: 50%;
      right: 15px;
      transform: translateY(-50%);
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      line-height: 1;
      padding: 5px;
      opacity: 0.8;
      transition: opacity 0.2s;
    }

    .close-button:hover {
      opacity: 1;
    }

    .flash-message.success .close-button {
        color: #155724; /* Dark green text */
    }
    .flash-message.error .close-button {
        color: #721c24; /* Dark red text */
    }

    /* 💡 NEW: Loading Overlay Styles */
    .loading-overlay {
      display: none; /* Hidden by default */
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
      z-index: 1000; /* Ensure it appears above other elements */
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }

    .loading-spinner {
      border: 4px solid var(--p-color-surface-subdued);
      border-top: 4px solid var(--p-color-interactive-default);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
    }

    .loading-text {
      color: var(--p-color-bg-default);
      font-size: 16px;
      font-weight: 500;
      margin-top: 10px;
    }

    /* Animation for the spinner */
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <h1>Product Bundles</h1>
  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-spinner"></div>
    <span class="loading-text">Processing...</span>
  </div>
  <% if (message) { 
      // Decode the URI component
      const decodedMessage = decodeURIComponent(message);
      // Determine if it's an error or success message
      const isError = decodedMessage.toLowerCase().includes('error') || decodedMessage.toLowerCase().includes('❌');
      const messageClass = isError ? 'error' : 'success';
  %>
      <div class="flash-message <%= messageClass %>" id="flash-message">
          <%- decodedMessage.replace(/<br>/g, '\n') %>
          <button class="close-button" onclick="dismissMessage()">
              &times;
          </button>
      </div>
  <% } %>
  <div class="card">
    <div class="card-header">
        <h2>Bundle Configuration</h2>
    </div>
    
    <div class="tab-container">
      <div class="tab active" onclick="openTab('create-bundles')">Create New Bundles</div>
      <div class="tab" onclick="openTab('update-bundles')">Update Existing Discounts</div>
    </div>
  
    <% 
      // FIX: Calculate productsWithoutBundles before the h3 tag
      const bundledProductIds = bundledProducts.map(p => p.id.toString());
      const productsWithoutBundles = products.filter(p => !bundledProductIds.includes(p.id.toString()));

      // 💡 NEW: Extract all unique tags for filter options
      const allUniqueTags = [...new Set(products.flatMap(p => p.tags))].filter(Boolean).sort();
    %>
    <div id="create-bundles" class="tab-content active">
      <h3 id="create-bundle-header">Select Products and Set Initial Discounts (<%= productsWithoutBundles.length %> Products)</h3>
      <p>Non-bundled products with sufficient inventory quantity are listed below.</p>
      
      <div class="product-filter card" style="padding: 15px; margin-bottom: 20px;">
          <div class="card-header" style="border-bottom: none; padding-bottom: 0; margin-bottom: 10px;">
              <h3 style="margin-bottom: 0;">Product Filters</h3>
              <h5 style="margin-top: 5px; margin-bottom: 5px; font-weight: 400; color: var(--p-color-text-default);">Use these filters to narrow down the product list below.</h5>
          </div>
          <div class="form-group" style="margin-bottom: 0;">
              <div class="input-field">
                  <label for="filter_by_tag">Filter by Tag (Any Tag):</label>
                  <select id="filter_by_tag" multiple>
                      <% allUniqueTags.forEach(tag => { %>
                          <option value="<%= tag %>"><%= tag %></option>
                      <% }) %>
                  </select>
              </div>

              <div class="input-field">
                  <label for="filter_by_collection">Filter by Market/Collection (Primary Tags):</label>
                  <select id="filter_by_collection" multiple>
                      <% 
                        // Use a fixed list of your market tags for simplicity, assuming they map 1:1 with primary tags
                        // Note: Value is set to lowercase tag as per filtering logic (e.g., "de")
                        const marketTags = ['DE', 'SE', 'FR', 'IT', 'FI', 'ES', 'NL', 'NO'];
                        marketTags.forEach(tag => { 
                      %>
                          <option value="<%= tag.toLowerCase() %>"><%= tag %></option>
                      <% }); %>
                  </select>
              </div>
          </div>
      </div>
      <form class="bundle-form" action="/create-bundles" method="POST">
        <label for="create_product_ids">Select Products (without bundles):</label>
        
        <% if (productsWithoutBundles.length === 0) { %>
          <p class="no-bundles">No products available without bundles.</p>
        <% } else { %>
          <select name="product_ids" id="create_product_ids" multiple>
            <% productsWithoutBundles.forEach(product => { %>
              <option value="<%= product.id %>" data-tags="<%= product.tags ? product.tags.join(',') : '' %>"><%= product.title %> (ID: <%= product.id %>)</option>
            <% }) %>
          </select>
          
          <div class="form-group">
            <div class="input-field">
                <label>Discount for 2x (%):</label>
                <input type="number" name="discount2" step="0.01" min="0" max="100">
            </div>
            <div class="input-field">
                <label>Discount for 3x (%):</label>
                <input type="number" name="discount3" step="0.01" min="0" max="100">
            </div>
          </div>
          
          <div class="checkbox-wrapper">
            <label>
              <input type="checkbox" name="add_image" value="true" checked> Add main product image to bundle variants
            </label>
          </div>
          <button type="submit" class="primary-button">Create Bundles</button>
        <% } %>
      </form>
    </div>
  
    <div id="update-bundles" class="tab-content">
      <h3>Adjust Discounts for Products with Bundles (<%= bundledProducts.length %> Products)</h3>
      <form class="bundle-form" action="/update-bundles" method="POST">
        <label for="update_product_ids">Select Products (with bundles):</label>
        <% if (bundledProducts.length === 0) { %>
          <p class="no-bundles">No products with bundles to update.</p>
        <% } else { %>
          <select name="product_ids" id="update_product_ids" multiple>
            <% bundledProducts.forEach(product => { %>
              <option value="<%= product.id %>"><%= product.title %> (ID: <%= product.id %>)</option>
            <% }) %>
          </select>
          
          <div class="form-group">
            <div class="input-field">
                <label>New Discount for 2x (%):</label>
                <input type="number" name="discount2" step="0.01" min="0" max="100">
            </div>
            <div class="input-field">
                <label>New Discount for 3x (%):</label>
                <input type="number" name="discount3" step="0.01" min="0" max="100">
            </div>
          </div>
          <button type="submit" class="primary-button">Update Bundles</button>
        <% } %>
      </form>
    </div>
  </div>
  <div class="card">
    <div class="card-header">
        <h2>Existing Bundles Summary</h2>
    </div>
    <% if (bundledProducts.length === 0) { %>
      <p class="no-bundles">No bundles created for any products.</p>
    <% } else { %>
      <table>
        <thead>
          <tr>
            <th>Product Title (ID)</th>
            <th>Bundles Created</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          <% bundledProducts.forEach(product => { %>
            <tr>
              <td><%= product.title %> (<%= product.id %>)</td>
              <td><%= product.bundles.map(b => b.type).join(", ") %></td>
              <td>
                <a href="https://<%= process.env.SHOP %>/admin/products/<%= product.id %>#variants-section" class="manage-button" target="_top">Manage Variants</a>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    <% } %>
  </div>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/choices.js/1.1.6/choices.min.js" xintegrity="sha512-7PQ3MLNFhvDn/IQy12+1+jKcc1A/Yx4KuL62Bn6+ztkiitRVW1T/7ikAh675pOs3I+8hyXuRknDpTteeptw4Bw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script>
    // Global Choices instances
    let createChoicesInstance;
    let updateChoicesInstance;
    let tagFilterChoices;
    let collectionFilterChoices;
    let messageTimeout; 

    // 💡 NEW: Prevent browser's default hash scrolling
    if ('scrollRestoration' in history) {
      history.scrollRestoration = 'manual';
    }

    function dismissMessage() {
      const message = document.getElementById('flash-message');
      if (message) {
        if (messageTimeout) {
          clearTimeout(messageTimeout);
        }
        message.style.opacity = '0';
        setTimeout(() => {
          message.remove();
        }, 500);
      }
    }

    function showLoadingOverlay() {
      const loadingOverlay = document.getElementById('loading-overlay');
      if (loadingOverlay) {
        loadingOverlay.style.display = 'flex';
      }
    }

    function openTab(tabId) {
      document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
      document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
      
      document.getElementById(tabId).classList.add('active');
      document.querySelector(`.tab[onclick="openTab('${tabId}')"]`).classList.add('active');
    }

    function initializeChoices() {
      const choicesConfig = {
        allowHTML: false,
        searchEnabled: true,
        removeItemButton: true,
        maxItemCount: -1, 
        renderSelectedChoices: 'always', 
        dropdownParent: null,
        placeholder: true,
        placeholderValue: 'Start typing to search and select products...', 
      };
      
      // Configuration for the filter selectors (standard dropdown)
      const filterChoicesConfig = {
        ...choicesConfig,
        renderSelectedChoices: 'auto', // Default behavior for filters
        placeholderValue: 'Select tags...',
        maxItemCount: -1, 
      };


      const createSelect = document.getElementById('create_product_ids');
      const updateSelect = document.getElementById('update_product_ids');
      const tagSelect = document.getElementById('filter_by_tag');
      const collectionSelect = document.getElementById('filter_by_collection');

      if (createSelect && createSelect.options.length > 0) {
        // 💡 UPDATED: Remove custom hideDropdown to use default behaviour (closed by default, open on click)
        createChoicesInstance = new Choices(createSelect, choicesConfig);
        // Do NOT call createChoicesInstance.showDropdown(); 
      }

      if (updateSelect && updateSelect.options.length > 0) {
        updateChoicesInstance = new Choices(updateSelect, choicesConfig);
        // Do NOT call updateChoicesInstance.showDropdown(); 
      }
      
      // 💡 NEW: Initialize Choices for Filters
      if (tagSelect) {
        tagFilterChoices = new Choices(tagSelect, { ...filterChoicesConfig, placeholderValue: 'Select product tags...' });
        tagSelect.addEventListener('change', filterProducts);
      }
      if (collectionSelect) {
        collectionFilterChoices = new Choices(collectionSelect, { ...filterChoicesConfig, placeholderValue: 'Select collections/markets...' });
        collectionSelect.addEventListener('change', filterProducts);
      }
    }
    
    // 💡 UPDATED: Filtering logic function
    function filterProducts() {
        if (!createChoicesInstance) return;

        // 1. Get selected filter values (all converted to lowercase for case-insensitive matching)
        const selectedTags = tagFilterChoices ? tagFilterChoices.getValue(true).map(t => t.toLowerCase()) : [];
        const selectedCollections = collectionFilterChoices ? collectionFilterChoices.getValue(true).map(c => c.toLowerCase()) : [];
            
        // Combine all unique filter tags
        const allFilters = [...new Set([...selectedTags, ...selectedCollections])].filter(Boolean);

        // 2. Get all original product options from the raw HTML select element
        const rawSelect = document.getElementById('create_product_ids');
        const allOptions = Array.from(rawSelect.options);
        
        // 3. Keep track of currently selected items to re-select them after filtering
        const currentlySelectedValues = createChoicesInstance.getValue(true);
        
        // 4. Create the new, filtered list of choices
        const newChoices = allOptions
            .filter(option => {
                const productTagsAttr = option.getAttribute('data-tags');
                
                if (allFilters.length === 0) {
                    return true; // Show all if no filters are selected
                }
                
                if (!productTagsAttr) return false;
                
                // Convert product tags to an array of lowercase tags
                const productTags = productTagsAttr.toLowerCase().split(',');

                // Show product if it matches ANY of the selected filter tags
                return allFilters.some(filterTag => productTags.includes(filterTag));
            })
            .map(option => ({
                value: option.value,
                label: option.textContent,
                // Check if this option was selected before filtering
                selected: currentlySelectedValues.includes(option.value), 
                disabled: false,
                customProperties: { tags: option.getAttribute('data-tags') }
            }));

        // 5. Add the filtered choices back
        // The third argument (true) tells Choices to add the items instead of replacing all.
        // We use clearChoices/setChoices to completely refresh the options list based on the filters.
        createChoicesInstance.clearChoices(); 
        createChoicesInstance.setChoices(newChoices, 'value', 'label', true);
        
        // 6. Update product count in the header
        const productCountHeader = document.getElementById('create-bundle-header');
        if (productCountHeader) {
            productCountHeader.textContent = `Select Products and Set Initial Discounts (${newChoices.length} Products)`;
        }
    }


    document.addEventListener('DOMContentLoaded', () => {
      // Initialize Choices.js for all fields
      initializeChoices();

      // 💡 NEW: Get tab from query parameter instead of hash
      const urlParams = new URLSearchParams(window.location.search);
      const tab = urlParams.get('tab') || 'create-bundles';
      openTab(tab);

      // 💡 NEW: Scroll to top if message is present, with slight delay to ensure DOM rendering
      const messageElement = document.getElementById('flash-message');
      if (messageElement) {
        messageTimeout = setTimeout(dismissMessage, 10000);
        // Use setTimeout to ensure scroll happens after DOM and Choices.js rendering
        setTimeout(() => {
          window.scrollTo({ top: 0, behavior: 'smooth' });
        }, 100);
      }

      // 💡 Add submit event listeners to both forms and pass tab parameter
      const createForm = document.querySelector('#create-bundles .bundle-form');
      const updateForm = document.querySelector('#update-bundles .bundle-form');

      if (createForm) {
        createForm.addEventListener('submit', (e) => {
          showLoadingOverlay();
          // Append tab parameter to form action
          e.target.action = '/create-bundles?tab=create-bundles';
        });
      }
      if (updateForm) {
        updateForm.addEventListener('submit', (e) => {
          showLoadingOverlay();
          // Append tab parameter to form action
          e.target.action = '/update-bundles?tab=update-bundles';
        });
      }
    });
  </script>
</body>
</html>
